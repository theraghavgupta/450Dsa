//Question: The next permutation of an array of integers is the next lexicographically greater permutation of its integers.

#include<bits/stdc++.h>
using namespace std;

vector<int>::iterator b_search(vector<int> nums,vector<int>::iterator l,vector<int>::iterator r,int key ){
    auto index=nums.begin()-1;
    while(l<=r){
        auto mid = l+(r-l)/2;
        if(*mid<=key){
            r=mid-1;
        }else{
            l=mid+1;
            if(index==nums.begin()-1||*index>=*mid){
                index=mid;
            }
        }
    }
    return index;
}

bool isSorted(vector<int>& nums){
    for(int i=1;i<nums.size();i++){
        if(nums[i]>nums[i-1]){
            return false;
        }
    }
    return true;
}

void permute(vector<int>& nums){
    auto last = nums.end()-1;
    auto start = nums.begin();
    
    if(isSorted(nums)){sort(start,last+1);} //to check if the array has the highest possible lexiographic permutation in order to return lowest possible order
    else{
        for(auto i=last;i>=start;i--){
            if(*i>*(i-1)){
                auto index = b_search(nums,i,last,*(i-1));//using binary search to search for the closest greater element of i-1 in interval (i,last)
                swap(*(i-1),*index);
                sort(i,nums.end());
                break;
            }
        }
    }
}

void print_vector(vector<int>& nums){
    for(auto x:nums){
        cout<<x<<" ";
    }
    cout<<endl;
}

int main(){
    vector<int> nums = {4,5,3,2,1};
    print_vector(nums);
    
    permute(nums); //function to permute next permutation
    print_vector(nums);
    
    next_permutation(nums.begin(),nums.end());//in-built function in STL
    print_vector(nums);
}



