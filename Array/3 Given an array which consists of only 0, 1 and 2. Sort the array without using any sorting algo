//Question: Given an array which consists of only 0, 1 and 2. Sort the array without using any sorting algo

#include<bits/stdc++.h>
using namespace std;

//count sort
void countAr(int arr[],int n,int count[]){
    for(int i=0;i<n;i++){
        if(arr[i]==0){
            count[0]++;
        }else if(arr[i]==1){
            count[1]++;
        }else{
            count[2]++;
        }
    }
    for(int i=0;i<count[0];i++){
        arr[i]=0;
    }for(int i=count[0];i<(count[0]+count[1]);i++){
        arr[i]=1;
    }for(int i=(count[0]+count[1]);i<(count[0]+count[1]+count[2]);i++){
        arr[i]=2;
    }
    
}


//standard Dutch National Flag(DNF) sort
void swap(int arr[],int low,int high){
    int temp = arr[low];
    arr[low] = arr[high];
    arr[high] = temp;
}
void dnfSort(int arr[],int n){
    int low=0,mid=0,high=n-1;
    
    while(mid<=high){
        if(arr[mid]==0){
            swap(arr,low,mid);
            low++;
            mid++;
        }else if(arr[mid]==1){
            mid++;
        }
        else{
            swap(arr,mid,high);
            high--;
        }
    }
    
    
}

int main(){
    //// sorting the array takes O(nlogn) time using vector sort
    // vector<int> S = {1,1,0,2,2,1,0};
    // sort(S.begin(),S.end());
    // for(int x:S){
    //     cout<<x<<" ";
    // }
    
    int arr[7] = {1,1,0,2,2,1,0};
    int n = sizeof(arr)/sizeof(int);
    
    //// Linear Time O(n) to sort 0,1,2
    // int count[3] = {0,0,0};
    // countAr(arr,n,count);
    
    dnfSort(arr,n);
    
    //// printing the sorted array
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    
}
